<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://henrylijie.github.io/</id>
    <title>LiJieblog</title>
    <updated>2023-08-09T16:09:26.584Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://henrylijie.github.io/"/>
    <link rel="self" href="https://henrylijie.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://henrylijie.github.io/images/avatar.png</logo>
    <icon>https://henrylijie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, LiJieblog</rights>
    <entry>
        <title type="html"><![CDATA[python基础知识]]></title>
        <id>https://henrylijie.github.io/post/python-ji-chu-zhi-shi/</id>
        <link href="https://henrylijie.github.io/post/python-ji-chu-zhi-shi/">
        </link>
        <updated>2023-08-09T15:58:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python基础知识">python基础知识</h1>
<h2 id="一-起步">一、起步</h2>
<h3 id="11-概述">1.1 概述</h3>
<p>本博文主要描述python语言是什么样的语言，python语言的特点，以及python开发环境的搭建。供学习python语言的人参考。不完善之处请多多指教。</p>
<h3 id="12-python简介">1.2 python简介</h3>
<ul>
<li>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</li>
<li>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</li>
<li>Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</li>
<li>Python 是交互式语言： 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。</li>
<li>Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</li>
<li>Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏</li>
</ul>
<h3 id="13-python特点">1.3 python特点</h3>
<ul>
<li><strong>易于学习</strong>：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</li>
<li><strong>易于阅读</strong>：Python代码定义的更清晰。</li>
<li><strong>易于维护</strong>：Python的成功在于它的源代码是相当容易维护的。</li>
<li><strong>一个广泛的标准库</strong>：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</li>
<li><strong>互动模式</strong>：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</li>
<li><strong>可移植</strong>：基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</li>
<li><strong>可扩展</strong>：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li>
<li><strong>数据库</strong>：Python提供所有主要的商业数据库的接口。</li>
<li><strong>GUI编程</strong>：Python支持GUI可以创建和移植到许多系统调用。</li>
<li><strong>可嵌入</strong>: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得&quot;脚本化&quot;的能力。</li>
</ul>
<h3 id="14-python环境搭建">1.4 python环境搭建</h3>
<blockquote>
<p><strong>Python可应用于多平台包括 Linux 和 Mac OS X。<br>
你可以通过终端窗口输入 &quot;python&quot; 命令来查看本地是否已经安装Python以及Python的安装版本。</strong></p>
</blockquote>
<h4 id="141-python下载">1.4.1 python下载</h4>
<p>Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到:<a href="http://www.python.org/">Python官网</a></p>
<p>你可以点击<a href="www.python.org/doc/">Python文档</a>链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。</p>
<h4 id="142-python安装">1.4.2 python安装</h4>
<ul>
<li>Unix &amp; Linux 平台安装 Python:</li>
</ul>
<blockquote>
<p>打开WEB浏览器访问<a href="http://www.python.org/download/">python下载页面</a></p>
</blockquote>
<blockquote>
<p>选择适用于Unix/Linux的源码压缩包。</p>
</blockquote>
<blockquote>
<p>下载及解压压缩包。</p>
</blockquote>
<blockquote>
<p>如果你需要自定义一些选项修改<code>Modules/Setup</code></p>
</blockquote>
<blockquote>
<p>执行 <code>./configure</code>脚本<br>
<code>make</code><br>
<code>make install</code></p>
</blockquote>
<blockquote>
<p>执行以上操作后，Python会安装在 <strong>/usr/local/bin</strong> 目录中，Python库安装在**/usr/local/lib/pythonXX**, <strong>XX</strong>为你使用的Python的版本号。</p>
</blockquote>
<ul>
<li>Window 平台安装 Python:</li>
</ul>
<blockquote>
<p>打开WEB浏览器访问<a href="http://www.python.org/download/">python下载页面</a></p>
</blockquote>
<blockquote>
<p>在下载列表中选择<strong>Window</strong>平台安装包，包格式为：<strong>python-XYZ.msi</strong> 文件 ， <strong>XYZ</strong> 为你要安装的版本号。</p>
</blockquote>
<blockquote>
<p>要使用安装程序<strong>python-XYZ.msi</strong>, <strong>Windows系统</strong>必须支持<strong>Microsoft Installer 2.0</strong>搭配使用。只要保存安装文件到本地计算机，然后运行它，看看你的机器支持<strong>MSI</strong>。<strong>Windows XP</strong>和<strong>更高版本已经有MSI</strong>，很多老机器也可以安装<strong>MSI</strong>。</p>
</blockquote>
<blockquote>
<p>下载后，双击下载包，进入Python安装向导，安装非常简单，你只需要使用默认的设置一直点击&quot;下一步&quot;直到安装完成即可。</p>
</blockquote>
<ul>
<li>MAC 平台安装 Python:</li>
</ul>
<blockquote>
<p>最近的Macs系统都自带有Python环境，你也可以在链接<a href="http://www.python.org/download/">python下载页面</a>下载最新版安装。</p>
</blockquote>
<h3 id="15-环境变量设置">1.5 环境变量设置</h3>
<p>程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。</p>
<p>path(路径)存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。</p>
<p>Unix或Windows中路径变量为PATH（UNIX区分大小写，Windows不区分大小写）。</p>
<p>在Mac OS中，安装程序过程中改变了python的安装路径。如果你需要在其他目录引用Python，你必须在path中添加Python目录。</p>
<ul>
<li>
<p>在 Unix/Linux 设置环境变量</p>
<pre><code class="language-bash"># 在 csh shell: 输入
setenv PATH &quot;$PATH:/usr/local/bin/python&quot;
# 保存并退出。
# 在 bash shell (Linux): 输入
export PATH=&quot;$PATH:/usr/local/bin/python&quot; 
# 保存并退出。
#在 sh 或者 ksh shell: 输入
PATH=&quot;$PATH:/usr/local/bin/python&quot; 
# 保存并退出。
## 注意: /usr/local/bin/python 是 Python 的安装目录。
</code></pre>
</li>
<li>
<p>在 Windows 设置环境变量</p>
</li>
</ul>
<blockquote>
<p>在环境变量中添加Python目录：</p>
</blockquote>
<pre><code class="language-powershell">在命令提示框中(cmd) : 输入
path=%path%;C:\Python 
按下&quot;Enter&quot;。
注意: C:\Python 是Python的安装目录。
</code></pre>
<blockquote>
<p>也可以通过以下方式设置：</p>
</blockquote>
<pre><code class="language-powershell">右键点击&quot;计算机&quot;，然后点击&quot;属性&quot;
然后点击&quot;高级系统设置&quot;
选择&quot;系统变量&quot;窗口下面的&quot;Path&quot;,双击即可！
然后在&quot;Path&quot;行，添加python安装路径即可(我的D:\Python32)，所以在后面，添加该路径即可。 ps：记住，路径直接用分号&quot;；&quot;隔开！
最后设置成功以后，在cmd命令行，输入命令&quot;python&quot;，就可以有相关显示。
</code></pre>
<h3 id="16-python-环境变量">1.6 Python 环境变量</h3>
<blockquote>
<p>下面几个重要的环境变量，它应用于Python：</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">变量名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">PYTHONPATH</td>
<td style="text-align:left">PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td>
</tr>
<tr>
<td style="text-align:left">PYTHONSTARTUP</td>
<td style="text-align:left">Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td>
</tr>
<tr>
<td style="text-align:left">PYTHONCASEOK</td>
<td style="text-align:left">加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写。</td>
</tr>
<tr>
<td style="text-align:left">PYTHONHOME</td>
<td style="text-align:left">另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td>
</tr>
</tbody>
</table>
<h3 id="17-运行python">1.7 运行python</h3>
<blockquote>
<p>有三种方式可以运行Python：</p>
</blockquote>
<h4 id="171-交互式解释器">1.7.1 交互式解释器：</h4>
<p>你可以通过命令行窗口进入python并开在交互式解释器中开始编写Python代码。</p>
<p>你可以在Unix，DOS或任何其他提供了命令行或者shell的系统进行python编码工作。</p>
<pre><code class="language-bash">$ python # Unix/Linux
</code></pre>
<p><strong>或者</strong></p>
<pre><code class="language-powershell">C:&gt;python # Windows/DOS
</code></pre>
<pre><code class="language-powershell">以下为Python命令行参数：
-d		在解析时显示调试信息
-O		生成优化代码 ( .pyo 文件 )
-S		启动时不引入查找Python路径的位置
-V		输出Python版本号
-X		从 1.6版本之后基于内建的异常（仅仅用于字符串）已过时。
-c cmd	执行 Python 脚本，并将运行结果作为 cmd 字符串。
file	在给定的python文件执行python脚本。
</code></pre>
<h4 id="172-命令行脚本">1.7.2 命令行脚本</h4>
<p>在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：</p>
<pre><code class="language-bash">$ python script.py # Unix/Linux
</code></pre>
<p><strong>或者</strong></p>
<pre><code class="language-powershell">C:&gt;python script.py # Windows/DOS
</code></pre>
<p><strong>注意</strong>：在执行脚本时，请检查脚本是否有可执行权限</p>
<h4 id="173-集成开发环境-pycharm">1.7.3 集成开发环境: PyCharm</h4>
<blockquote>
<p><strong>IDE：Integrated Development Environment</strong></p>
</blockquote>
<ul>
<li>
<p>PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。</p>
</li>
<li>
<p>PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……</p>
</li>
<li>
<p>PyCharm 下载地址 <a href="https://www.jetbrains.com/pycharm/download/">pycharm</a></p>
</li>
</ul>
<h2 id="二-变量和简单数据类型">二、变量和简单数据类型</h2>
<h3 id="21-hello-world">2.1 hello world</h3>
<pre><code class="language-python"># hello_world.py
print(&quot;hello world!&quot;)
</code></pre>
<blockquote>
<p>编写程序时，编辑器会以各种方式突出程序的不同部分。例如，它知道print是一个函数的名称，因此将其显示为蓝色；它知道“Hello Python world!”不是Python代码，因此将其显示为橙色。这种功能称为语法突出。</p>
</blockquote>
<pre><code class="language-powershell">C:\Users\Administrator&gt; python d:/python/hello_world.py
</code></pre>
<blockquote>
<p>运行<code>hello_workd.py</code>的时候，末尾的<code>.py</code>指出这是一个python程序，因此编辑器将使用python解释器来运行它。python解释器读取整个程序，确定其中每个单词的含义。例如，看到单词print时，解释器就会将括号中的内容打印到屏幕，而不会管括号中的内容是什么。</p>
</blockquote>
<h3 id="22-变量">2.2 变量</h3>
<blockquote>
<p>尝试在<code>hello_world.py</code>中使用一个变量，在这个文件开头添加一行代码，并对代码进行改进。</p>
</blockquote>
<pre><code class="language-python">message = &quot;hello world!&quot;
print(message)
</code></pre>
<p><strong>再运行这个程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
hello world!
</code></pre>
<blockquote>
<p>将<code>hello world!</code>存储在<code>message</code>中，python解释器将文本<code>hello world！</code>与变量<code>message</code>联合起来，再将变量<code>message</code>关联的值打印到屏幕。</p>
</blockquote>
<h4 id="221-变量的命名和使用">2.2.1 变量的命名和使用</h4>
<p>在Python中使用变量是，需要遵守一些规则和指南。以下为有关变量的规则：</p>
<ul>
<li>变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如：可将变量命名为<strong>message_1</strong>,但不能将其命名为<strong>1_message</strong></li>
<li>变量名不能包含空格，但可使用下划线来分割其中的单词。例如：变量名<strong>greeting_message</strong>可行，单变量名<strong>greeting message</strong>会引发错误。</li>
<li>不要将python关键字和函数名用作变量名，即不要使用python保留用于特殊用途的单词，如<strong>print</strong>。</li>
<li>变量名为应既简短又具有描述性。比如：<strong>name</strong>比<strong>n</strong>好，<strong>student_name</strong>比<strong>s_n</strong>好</li>
<li>慎用小写字母<strong>1</strong>和大写字母<strong>O</strong>，因为它们可能被人看错，成为数字<strong>1</strong>和<strong>0</strong>。</li>
</ul>
<h4 id="222-使用变量时避免命名错误">2.2.2 使用变量时避免命名错误</h4>
<pre><code class="language-python">message = &quot;hello world!&quot;
print(messae)
</code></pre>
<p><strong>少敲了一个g，运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
Traceback (most recent call last):
  File &quot;d:/python/hello_world.py&quot;, line 2, in &lt;module&gt;
    print(messae)
NameError: name 'messae' is not defined
</code></pre>
<blockquote>
<p>这里解释器就告诉了错误的位置：第二行，然后具体什么错误</p>
</blockquote>
<h3 id="23-字符串">2.3 字符串</h3>
<pre><code class="language-python">message = &quot;hello world!&quot;
print(type(message))

message = 'hello world!'
print(type(message))
</code></pre>
<p><strong>运行程序：</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
&lt;class 'str'&gt;
&lt;class 'str'&gt;
</code></pre>
<blockquote>
<p>字符串就是一系列字符。在Python中，用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号。</p>
</blockquote>
<h4 id="231-使用方法修改字符串大小写">2.3.1 使用方法修改字符串大小写</h4>
<pre><code class="language-python">message = &quot;HELLO world!&quot;
# 修改为首字母大写
print(message.title())
# 修改为全部为大写
print(message.upper())
# 修改为全部为小写
print(message.lower())
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
Hello World!
HELLO WORLD!
hello world!
</code></pre>
<h4 id="232-合并字符串">2.3.2 合并字符串</h4>
<pre><code class="language-python">a = 'hello'
b = 'world'
message = a +&quot; &quot;+ b
print(message)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
hello world
</code></pre>
<h4 id="233-使用制表符或换行来添加空白">2.3.3 使用制表符或换行来添加空白</h4>
<pre><code class="language-python">print('\thello \nworld')
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
        hello 
world
</code></pre>
<blockquote>
<p><code>\t</code> :tab了一下</p>
<p><code>\n</code>:换行</p>
</blockquote>
<h4 id="234-去除空白">2.3.4 去除空白</h4>
<pre><code class="language-python">message = ' hello world8888'
print(message.rstrip(&quot;8&quot;).lstrip())
print(message.lstrip())
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
hello world
hello world8888
</code></pre>
<blockquote>
<p><code>lstrip</code>:去除开头的空格或者字符</p>
<p><code>rstrip</code>:去除末尾的空格或者字符</p>
</blockquote>
<h3 id="24-数字">2.4 数字</h3>
<h4 id="241-整数">2.4.1 整数</h4>
<pre><code class="language-python">message = 8888
print(type(message))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
&lt;class 'int'&gt;
</code></pre>
<h4 id="242-浮点数">2.4.2 浮点数</h4>
<pre><code class="language-python">message = 8888.8888
print(type(message))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
&lt;class 'float'&gt;
</code></pre>
<h4 id="243-加减乘除">2.4.3 加减乘除</h4>
<pre><code class="language-python">a = 10
b = 2.5
# + 
print(a + b)
# -
print(a - b)
# *
print(a * b)
# /
print(a / b)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py
12.5
7.5
25.0
4.0
</code></pre>
<h3 id="25-注释">2.5 注释</h3>
<pre><code class="language-python"># 注释1 这是单行注释

'''
注释2
这是多行注释
'''

&quot;&quot;&quot;
注释3
这是多行注释
&quot;&quot;&quot;
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/hello_world.py

</code></pre>
<blockquote>
<p>编写注释的主要目的是阐述代码要做什么，以及是如何做的</p>
<p>在开发项目期间，你对各个部分如何协同工作了如指掌</p>
<p>但过段时间后，有些细节你可能不记得了。</p>
<p>当然，你总是可以通过研究代码来确定各个部分的工作原理，</p>
<p>但通过编写注释，以清晰的自然语言对解决方案进行概述，可节省很多时间</p>
</blockquote>
<h3 id="26-python之禅">2.6 python之禅</h3>
<pre><code class="language-python">&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre>
<h2 id="三-列表简介">三、列表简介</h2>
<h3 id="31-列表">3.1 列表</h3>
<pre><code class="language-python">message = ['a','b','b']
print(message)
print(type(message))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['a', 'b', 'c']
&lt;class 'list'&gt;
</code></pre>
<blockquote>
<p>在python中用<code>[]</code>来表示列表，并用逗号来分隔其中的元素</p>
</blockquote>
<h4 id="311-访问列表元素">3.1.1 访问列表元素</h4>
<pre><code class="language-python">message = ['a', 2 ,'c']
print(message[0])
print(message[1:])
print(message[:2])
print(message[-1])

print(type(message[0]))
print(type(message[-2]))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
a
[2, 'c']
['a', 2]
c
&lt;class 'str'&gt;
&lt;class 'int'&gt;
</code></pre>
<blockquote>
<p><strong>注意</strong>：索引是从0开始计算，例如<code>['a', 2 ,'c']</code> 从左往右就是<code>0,1,2</code>，从右往左就是<code>-1,-2,-3</code>。</p>
</blockquote>
<blockquote>
<p><code>print(message[0])</code>输出<code>a</code></p>
<p><code>print(message[1:])</code>输出从左往右第1号元素开始后面的所有，包括第1号元素</p>
<p><code>print(message[:2])</code>输出从左往右第2号元素开始前面的所有，<strong>但</strong>不包括第2号元素</p>
<p><code>print(message[-1])</code>输出从右往左-1号元素</p>
</blockquote>
<blockquote>
<p>列表里面可以是字符串，也可以是整数，还可以是浮点数</p>
</blockquote>
<h3 id="32-修改-添加和删除元素">3.2 修改、添加和删除元素</h3>
<h4 id="321-修改">3.2.1 修改</h4>
<pre><code class="language-python">message = ['a', 2 ,'c']
message[0] = ‘apple’ # 在表中将第0号元素替换成apple
print(message)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['apple', 2, 'c']
</code></pre>
<blockquote>
<p><code>message[0] = ‘apple’</code>表示将第0号元素替换成<code>'apple'</code></p>
<p>你可以修改列表中的任意一号元素，不只是第0号元素</p>
</blockquote>
<h4 id="322-添加">3.2.2 添加</h4>
<pre><code class="language-python">message = ['a', 2 ,'c']
message.append('d') # 在表的末尾添加字符串d
print(message)

message.insert(1,'apple') # 在表的第1号元素的位置添加字符串apple
print(message)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['a', 2, 'c', 'd']
['a', 'apple', 2, 'c', 'd']
</code></pre>
<h4 id="323-删除">3.2.3 删除</h4>
<pre><code class="language-python">message = ['a', 2 ,'c']
del message[1] # 将表的第1号元素删除
print(message)

messages = message.pop() #将最后一号元素删除，并直接提取出来
print(messages) # 打印出删除的元素
print(message)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['a', 'c']
c
['a']
</code></pre>
<h3 id="33-组织列表">3.3 组织列表</h3>
<h4 id="331-使用sort永久性排序">3.3.1 使用sort()永久性排序</h4>
<pre><code class="language-python">message = ['b','c','a']
message.sort() # 使用sort()永久性排序
print(message)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['a', 'b', 'c']
</code></pre>
<h4 id="332-使用sorted临时性排序">3.3.2 使用sorted()临时性排序</h4>
<pre><code class="language-python">message = ['b','c','a']
print(sorted(message))
print(message)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['a', 'b', 'c']
['b', 'c', 'a']
</code></pre>
<h4 id="333-倒着打印列表">3.3.3 倒着打印列表</h4>
<pre><code class="language-python">message = ['b','c','a']
message.reverse()
print(message)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['a', 'c', 'b']
</code></pre>
<h4 id="334-确认列表的长度">3.3.4 确认列表的长度</h4>
<pre><code class="language-python">message = ['b','c','a']
print(len(message))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
3
</code></pre>
<h2 id="四-操作列表">四、操作列表</h2>
<h3 id="41-遍历列表">4.1 遍历列表</h3>
<pre><code class="language-python">names = ['zhangsan','lisi','wangwu']

for i in names:
    print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
zhangsan
lisi
wangwu
</code></pre>
<blockquote>
<p>使用<strong>for</strong>循环，将<code>i</code> 遍历一边<code>names</code>列表，将列表中的每个元素都打印出一遍</p>
</blockquote>
<h4 id="411-深入研究循环">4.1.1 深入研究循环</h4>
<pre><code class="language-python">names = []

for i in (1,2,3):
    name = input(&quot;姓名：&quot;)
    print(&quot;hello！&quot; + name + &quot;，很高兴您的注册！&quot;)
    names.append(name)

print(names)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/lists.py
姓名：张三
hello！张三，很高兴您的注册！
姓名：李四
hello！李四，很高兴您的注册！
姓名：王五
hello！王五，很高兴您的注册！
['张三', '李四', '王五']
</code></pre>
<blockquote>
<p>首先给了一个空列表，使用<strong>for</strong>循环循环三次，三次中，每一次都要求输入姓名，随后打印出来再存储进之前的列表，最后循环结束后将列表打印出来。</p>
</blockquote>
<h3 id="42-创建数值列表">4.2 创建数值列表</h3>
<h4 id="421-使用函数range">4.2.1 使用函数<code>range()</code></h4>
<pre><code class="language-python">for i in range(3):
    print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
0
1
2
</code></pre>
<blockquote>
<p>使用<code>range()</code>的时候，还可以指定步长</p>
</blockquote>
<pre><code class="language-python">for i in range(1,9,2):
    print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
1
3
5
7
</code></pre>
<h4 id="422-使用range创建数字列表">4.2.2 使用<code>range()</code>创建数字列表</h4>
<pre><code class="language-python">print(list(range(3)))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
[0, 1, 2]
</code></pre>
<h4 id="423-对数字列表执行简单的统计计算">4.2.3 对数字列表执行简单的统计计算</h4>
<pre><code class="language-python">nums = [1,4,7,11,14]
print(min(nums)) # 最小

print(max(nums)) # 最大

print(sum(nums)) # 和
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
1
14
37
</code></pre>
<h4 id="424-简写列表">4.2.4 简写列表</h4>
<pre><code class="language-python">nums = [i for i in range(3)]
print(nums)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/lists.py
[0, 1, 2]
</code></pre>
<h3 id="43-使用列表的一部分">4.3 使用列表的一部分</h3>
<h4 id="431-切片">4.3.1 切片</h4>
<pre><code class="language-python">message = ['a', 2 ,'d','b','c']
print(message[2:])
print(message[:3])
print(message[1:4])
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['d', 'b', 'c']
['a', 2, 'd']
[2, 'd', 'b']
</code></pre>
<blockquote>
<p><strong>注意</strong>：索引是从0开始计算，例如<code>['a','b','c']</code> 从左往右就是<code>0,1,2</code>，从右往左就是<code>-1,-2,-3</code>。</p>
</blockquote>
<blockquote>
<p><code>print(message[2:])</code>输出从左往右第2号元素开始后面的所有，包括第2号元素</p>
<p><code>print(message[:3])</code>输出从左往右第3号元素开始前面的所有，<strong>但</strong>不包括第3号元素</p>
<p><code>print(message[1:4])</code>输出从左往右第1号元素开始到第4号元素中间的所有元素，包括1号元素，<strong>但</strong>不包括第3号元素</p>
</blockquote>
<h4 id="432-遍历切片">4.3.2 遍历切片</h4>
<pre><code class="language-python">lists = ['pig','dog','cat','apple']
zoon_lists = []
print(&quot;动物：&quot;)
for i in lists[:3]:
    zoon_lists.append(i)

print(zoon_lists)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/lists.py
动物：
['pig', 'dog', 'cat']
</code></pre>
<h4 id="433-复制列表">4.3.3 复制列表</h4>
<pre><code class="language-python">a = ['a','b','c','d']
b = a[:]
print(b)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
['a', 'b', 'c', 'd']
</code></pre>
<h3 id="44-元组">4.4 元组</h3>
<p>元组看起来犹如列表，但使用圆括号而不是方括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。</p>
<h4 id="441-定义元组">4.4.1 定义元组</h4>
<pre><code class="language-python">a = (1,2)
print(a[0])
print(a[1])
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
1
2
</code></pre>
<h4 id="442-遍历元组中的所有值">4.4.2 遍历元组中的所有值</h4>
<pre><code class="language-python">a = (1,2)
b = len(a)
for i in range(b):
    print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
0
1
</code></pre>
<h4 id="443-修改元组变量">4.4.3 修改元组变量</h4>
<pre><code class="language-python">a = (1,2)
a[0] = 20
print(a)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
Traceback (most recent call last):
  File &quot;d:/python/lists.py&quot;, line 2, in &lt;module&gt;
    a[0] = 20
TypeError: 'tuple' object does not support item assignment
</code></pre>
<blockquote>
<p>元组的类型是不能被修改的，如果想要修改，只能给变量重新赋值。</p>
</blockquote>
<pre><code class="language-python">a = (1,2)
a = (20,40)
print(a)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
(20, 40)
</code></pre>
<h2 id="五-if语句">五、if语句</h2>
<h3 id="51-一个简单的if语句">5.1 一个简单的if语句</h3>
<pre><code class="language-python">message = [&quot;apple&quot;,&quot;huawei&quot;,&quot;xiaomi&quot;]
aus=input(&quot;请输入一个手机型号：&quot;)
num=0
for i in message:
    num = num + 1
    if aus == i:
        print(&quot;这个手机是热门品牌！&quot;)
        print(i.title())
        break
    if num == int(3):
        print(&quot;这个手机不是热门&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个手机型号：huawei
这个手机是热门品牌！
Huawei
C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个手机型号：oneplus
这个手机不是热门
</code></pre>
<h3 id="52条件测试">5.2条件测试</h3>
<p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。</p>
<p>Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。</p>
<p>如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；</p>
<p>如果为False，Python就忽略这些代码。</p>
<h4 id="521-检查是否相等">5.2.1 检查是否相等</h4>
<pre><code class="language-python">&gt;&gt;&gt; a = 'abc'
&gt;&gt;&gt; a == 'abc' 
True
&gt;&gt;&gt; a == 'Abc' 
False
</code></pre>
<blockquote>
<p><strong>注意</strong>：python中大小写尤为重要，两个大小写不相同的值会被视为不相等。</p>
</blockquote>
<h4 id="522-检查是否不相等">5.2.2 检查是否不相等</h4>
<pre><code class="language-python">a = &quot;abc&quot;
b = &quot;abc&quot;
if a != b:
    print(&quot;不等于&quot;)
else:
    print(&quot;等于&quot;)
</code></pre>
<p><strong>运行结果</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
等于
</code></pre>
<h4 id="523-比较数字">5.2.3 比较数字</h4>
<pre><code class="language-python">a = 1
b = 1

if a == b:
    print(type(a))
    print(&quot;等于&quot;)
else:
    print(&quot;不等于&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
&lt;class 'int'&gt;
等于
</code></pre>
<h4 id="524-检查多个文件">5.2.4 检查多个文件</h4>
<pre><code class="language-python">### 使用and检查多个条件
&gt;&gt;&gt; age_0 = 22
&gt;&gt;&gt; age_1 = 18
&gt;&gt;&gt; (age_0 &gt;= 21) and (age_1 &gt;= 21)
False
&gt;&gt;&gt; age_1 = 22
&gt;&gt;&gt; (age_0 &gt;= 21) and (age_1 &gt;= 21)
True
</code></pre>
<pre><code class="language-python">### 使用or检查多个条件
&gt;&gt;&gt; age_0 = 22                     
&gt;&gt;&gt; age_1 = 18 
&gt;&gt;&gt; (age_0 &gt;= 21) or (age_1 &gt;= 21)
True
&gt;&gt;&gt; age_1 = 22                     
&gt;&gt;&gt; (age_0 &lt;= 21) or (age_1 &gt;= 21) 
True
</code></pre>
<h4 id="525-in-与-not-in">5.2.5 in 与 not in</h4>
<pre><code class="language-python">### in 包含
&gt;&gt;&gt; message = [&quot;apple&quot;,&quot;huawei&quot;,&quot;xiaomi&quot;]
&gt;&gt;&gt; 'apple' in message   
True
&gt;&gt;&gt; 'oneplus' in message  
False

### not in 不包含
&gt;&gt;&gt; message = [&quot;apple&quot;,&quot;huawei&quot;,&quot;xiaomi&quot;]
&gt;&gt;&gt; 'oneplus' not in message  
True
&gt;&gt;&gt; 'apple' not in message    
False
</code></pre>
<h4 id="526-布尔表达式">5.2.6 布尔表达式</h4>
<p>术语布尔表达式，它是条件测试的别名。</p>
<p>与条件表达式一样，布尔表达式的结果要么为True，要么为False。</p>
<pre><code class="language-python">game_active = True
can_edit = False
</code></pre>
<h3 id="53-if语句">5.3 if语句</h3>
<h4 id="531-if语句">5.3.1 if语句</h4>
<pre><code class="language-python">a = 15
b = int(input(&quot;请输入一个数字:&quot;))

if a == b:
    print(&quot;猜对了&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:15
猜对了
</code></pre>
<h4 id="532-if-else语句">5.3.2 if-else语句</h4>
<pre><code class="language-python">a = 15
b = int(input(&quot;请输入一个数字:&quot;))

if a == b:
    print(&quot;猜对了&quot;)
else:
    print(&quot;猜错了&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:1
猜错了
</code></pre>
<h4 id="533-if-elif-else语句">5.3.3 if-elif-else语句</h4>
<pre><code class="language-python">a = 15
b = int(input(&quot;请输入一个数字:&quot;))

if a == b:
    print(&quot;猜对了&quot;)
elif a &gt; b:
    print(&quot;猜小了&quot;)
else:
    print(&quot;猜大了&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:13
猜小了
C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:16
猜大了
C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:15
猜对了
</code></pre>
<h4 id="534-省略else代码">5.3.4 省略else代码</h4>
<pre><code class="language-python">a = 15
b = int(input(&quot;请输入一个数字:&quot;))

if a == b:
    print(&quot;猜对了&quot;)
elif a &gt; b:
    print(&quot;猜小了&quot;)
elif a &lt; b:
    print(&quot;猜大了&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:16
猜大了
</code></pre>
<h4 id="535-多条件语句">5.3.5 多条件语句</h4>
<pre><code class="language-python">a = 15
b = int(input(&quot;请输入一个数字:&quot;))

if a == b:
    print(&quot;猜对了&quot;)
if a &gt; b:
    print(&quot;猜小了&quot;)
if a &lt; b:
    print(&quot;猜大了&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:14
猜小了
C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:15
猜对了
C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入一个数字:16
猜大了
</code></pre>
<h3 id="54-使用if语句处理列表">5.4 使用if语句处理列表</h3>
<h4 id="541-处理单个列表">5.4.1 处理单个列表</h4>
<pre><code class="language-python">message = ['apple','huawei','xiaomi']

for i in message:
    a = input(&quot;请输入要买的手机:&quot;)   
    if a == 'apple':
        print(&quot;手机没有了&quot;)
        break
    elif a == 'huawei' or a == 'xiaomi':
        print(&quot;请拿走您的手机：&quot; + a)
        break
    else:
        print(&quot;请选择以下手机购买：&quot;)
        print(message)
        break
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入要买的手机:apple
手机没有了
C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入要买的手机:huawei
请拿走您的手机：huawei
C:\Users\Administrator&gt; &amp; python d:/python/lists.py
请输入要买的手机:csd
请选择以下手机购买：
['apple', 'huawei', 'xiaomi']
</code></pre>
<h4 id="542-处理多个列表">5.4.2 处理多个列表</h4>
<pre><code class="language-python">message = ['apple','huawei','xiaomi','oneplus','honor']
a = ['apple','huawei','xiaomi']

for i in message:
    if i in a:
        print(i + &quot;在表a里面&quot;)
    else:
        print(i + &quot;不在表a里面&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
apple在表a里面
huawei在表a里面
xiaomi在表a里面
oneplus不在表a里面
honor不在表a里面
</code></pre>
<h4 id="543-处理空列表">5.4.3 处理空列表</h4>
<pre><code class="language-python">message = []

if message:
    for i in message:
        print(i)
else:
    print(&quot;空列表&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/lists.py
空列表
</code></pre>
<h2 id="六-字典">六、字典</h2>
<h3 id="61-简单的字典">6.1 简单的字典</h3>
<pre><code class="language-python">class_0 = {'姓名':'张江','性别':'男','年龄':21}
print(class_0['姓名'])
print(class_0['年龄'])
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
张江
21
</code></pre>
<h3 id="62-使用字典">6.2 使用字典</h3>
<h4 id="621-访问字典中的值">6.2.1 访问字典中的值</h4>
<pre><code class="language-python">class_0 = {'姓名':'张江','性别':'男','年龄':21}

print(class_0['姓名'] + &quot;今年&quot; + str(class_0['年龄']) + &quot;岁了。&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
张江今年21岁。
</code></pre>
<blockquote>
<p><code>：</code>前面的为键，<code>：</code>后面的为值，两个一起统称为键-值对</p>
</blockquote>
<h4 id="622-创空字典">6.2.2 创空字典</h4>
<pre><code class="language-python">class_1 = {}
</code></pre>
<h4 id="623-添加键-值对">6.2.3 添加键-值对</h4>
<pre><code class="language-python">class_1 = {}

class_1['姓名'] = '毛辛'
class_1['性别'] = '女'
class_1['年龄'] = 20

print(class_1)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
{'姓名': '毛辛', '性别': '女', '年龄': 20}
</code></pre>
<h4 id="624-修改字典中的值">6.2.4 修改字典中的值</h4>
<pre><code class="language-python">class_1 = {'姓名':'毛辛','性别':'女','年龄':20}
print(class_1)
class_1['年龄'] = 19
print(class_1)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
{'姓名': '毛辛', '性别': '女', '年龄': 20}
{'姓名': '毛辛', '性别': '女', '年龄': 19}
</code></pre>
<h4 id="625-删除键-值对">6.2.5 删除键-值对</h4>
<pre><code class="language-python">class_1 = {'姓名':'毛辛','性别':'女','年龄':20}

del class_1['性别']
print(class_1)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
{'姓名': '毛辛', '年龄': 20}
</code></pre>
<h4 id="626-加入if语句">6.2.6 加入if语句</h4>
<pre><code class="language-python">class_0 = {'姓名':'张江','性别':'男','年龄':21}
class_1 = {'姓名':'毛辛','性别':'女','年龄':20}
name = input('请输入学生姓名:')
if name == class_0['姓名']:
    print(&quot;学生&quot; + class_0['姓名'] +&quot; 年龄&quot;+ str(class_0['年龄']) +'岁')
elif name == class_1['姓名']:
    print(&quot;学生&quot; + class_1['姓名'] +&quot; 年龄&quot;+ str(class_1['年龄']) +'岁')
else:
    print(&quot;没有 &quot; + name + &quot; 该学生&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS C:\Users\Administrator&gt; &amp; python d:/python/dict.py
请输入学生姓名:毛辛
学生毛辛 年龄20岁
PS C:\Users\Administrator&gt; &amp; python d:/python/dict.py
请输入学生姓名:张江
学生张江 年龄21岁
PS C:\Users\Administrator&gt; &amp; python d:/python/dict.py
请输入学生姓名:于凯
没有 于凯 该学生
</code></pre>
<h3 id="63-遍历字典">6.3 遍历字典</h3>
<blockquote>
<p>一个Python字典可能只包含几个键—值对，也可能包含数百万个键—值对。</p>
<p>鉴于字典可能包含大量的数据，Python支持对字典遍历。</p>
<p>字典可用于以各种方式存储信息，</p>
<p>因此有多种遍历字典的方式：可遍历字典的所有键—值对、键或值。</p>
</blockquote>
<pre><code class="language-python">print(class_0.items())
# dict_items([('姓名', '张江'), ('性别', '男'), ('年龄', 21), ('班级', '103班'), ('年级', '一年级')])
#items() 方法返回一个 view 对象。这个视图对象包含字典的键值对，形式为列表中的元组
</code></pre>
<h4 id="631-遍历所有的键-值对">6.3.1 遍历所有的键-值对</h4>
<pre><code class="language-python">class_0 = {
    '姓名':'张江',
    '性别':'男',
    '年龄':'21',
    '班级':'103班',
    '年级':'一年级'
    }

for x,y in class_0.items():
    print(x + &quot;:&quot; + y)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
姓名:张江
性别:男
年龄:21
班级:103班
年级:一年级
</code></pre>
<h4 id="632-遍历字典中的所有键">6.3.2 遍历字典中的所有键</h4>
<pre><code class="language-python">class_0 = {
    '姓名':'张江',
    '性别':'男',
    '年龄':'21',
    '班级':'103班',
    '年级':'一年级'
    }

for x in class_0.keys():
    print(x)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
姓名
性别
年龄
班级
年级
</code></pre>
<h4 id="633-遍历字典中的所有值">6.3.3 遍历字典中的所有值</h4>
<pre><code class="language-python">class_0 = {
    '姓名':'张江',
    '性别':'男',
    '年龄':'21',
    '班级':'103班',
    '年级':'一年级'
    }

for y in class_0.values():
    print(y)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
张江
男
21
103班
一年级
</code></pre>
<h3 id="64-嵌套">6.4 嵌套</h3>
<h4 id="641-字典列表">6.4.1 字典列表</h4>
<pre><code class="language-python">class_0 = {'姓名':'张江','性别':'男','年龄':21}
class_1 = {'姓名':'毛辛','性别':'女','年龄':20}
class_2 = {'姓名':'李杰','性别':'男','年龄':22}

class_101 = [class_0,class_1,class_2]

for i in class_101:
    print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
{'姓名': '张江', '性别': '男', '年龄': 21}
{'姓名': '毛辛', '性别': '女', '年龄': 20}
{'姓名': '李杰', '性别': '男', '年龄': 22}
</code></pre>
<h4 id="642-在字典中存储列表">6.4.2 在字典中存储列表</h4>
<pre><code class="language-python">class_2 = {'姓名':'李杰','性别':'男','年龄':22,'学科':[101,102]}

for i in class_2.items():
    print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
('姓名', '李杰')
('性别', '男')
('年龄', 22)
('学科', [101, 102])
</code></pre>
<h4 id="643-在字典中存储字典">6.4.3 在字典中存储字典</h4>
<pre><code class="language-python">class_2 = {'姓名':'李杰','性别':'男','年龄':22,'学科':[101, 102],'教师':{101:'严老师',102:'朱老师'}}

for i in class_2.items():
    print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
('姓名', '李杰')
('性别', '男')
('年龄', 22)
('学科', [101, 102])
('教师', {101: '严老师', 102: '朱老师'})
</code></pre>
<h4 id="644-字典中列表和字典试练">6.4.4 字典中列表和字典试练</h4>
<pre><code class="language-python">class_2 = {'姓名':'李杰','性别':'男','年龄':22,'学科':[101, 102],'教师':{101:'严老师',102:'朱老师'}}
# 打印出该学生的学科
for x,y in class_2.items():
    if x == '学科':
        print(&quot;该学生的学科为&quot; + str(y[0]) + &quot;与&quot; + str(y[1]))

# 打印出101学科的老师
for x,y in class_2.items():
    if x == '教师':
        for a,b in y.items():
            if a == 101:
                print(&quot;101学科的老师是&quot; + b)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/dict.py
该学生的学科为101与102
101学科的老师是严老师
</code></pre>
<h2 id="七-用户输入与while循环">七、用户输入与while循环</h2>
<h3 id="71-函数input">7.1 函数<code>input()</code></h3>
<pre><code class="language-python">name = input(&quot;请输入你的名字&quot;)
print(name)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/loops.py
请输入你的名字吴彦祖
吴彦祖
</code></pre>
<h3 id="72-while循环">7.2 while循环</h3>
<p>for循环用于针对集合中的每个元素都一个代码块，而while循环能够不停的运行，直到指定的条件不满足为止。</p>
<h4 id="721-使用while循环">7.2.1 使用while循环</h4>
<pre><code class="language-python">a = 1
while a &lt;= 5:
    print(a)
    a = a + 1
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
1
2
3
4
5
</code></pre>
<h4 id="722-让用户选择何时退出">7.2.2 让用户选择何时退出</h4>
<pre><code class="language-python">a = 1
b = &quot;输入'quit'将退出程序,任意键将继续循环：&quot;
c = &quot;&quot;
while c != 'quit':
    print(a)
    c = input(b)
    a = a+1
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
1
输入'quit'将退出程序,任意键将继续循环：qwe
2
输入'quit'将退出程序,任意键将继续循环：
3
输入'quit'将退出程序,任意键将继续循环：dfdf
4
输入'quit'将退出程序,任意键将继续循环：quit
</code></pre>
<h4 id="723-使用标志">7.2.3 使用标志</h4>
<pre><code class="language-python">a = 1
b = &quot;输入'quit'将退出程序,任意键将继续循环：&quot;
c = &quot;&quot;
active = True
while active:
    print(a)
    a = a+1
    c = input(b)
    if c == 'quit':
        active = False
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
1
输入'quit'将退出程序,任意键将继续循环：wqwq
2
输入'quit'将退出程序,任意键将继续循环：
3
输入'quit'将退出程序,任意键将继续循环：quit
</code></pre>
<h4 id="724-使用break退出循环">7.2.4 使用break退出循环</h4>
<pre><code class="language-python">a = 1
b = &quot;输入'quit'将退出程序,任意键将继续循环：&quot;
c = &quot;&quot;
active = True
while active:
    print(a)
    a = a+1
    c = input(b)
    if c == 'quit':
        break
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
1
输入'quit'将退出程序,任意键将继续循环：qwe
2
输入'quit'将退出程序,任意键将继续循环：
3
输入'quit'将退出程序,任意键将继续循环：quit
</code></pre>
<h4 id="725-在循环中使用continue">7.2.5 在循环中使用continue</h4>
<pre><code class="language-python">a = 0

while a &lt; 10:
    a = a+1
    if a % 2 == 0:
        continue
    print(a)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
1
3
5
7
9
</code></pre>
<h3 id="73-使用while循环来处理列表和字典">7.3 使用while循环来处理列表和字典</h3>
<h4 id="731-在列表之间移动元素">7.3.1 在列表之间移动元素</h4>
<pre><code class="language-python">n = ['a','b','c','d','e']
m = []

while n:
    y = n.pop()
    print(y)
    m.append(y)
print(n)
print(m)
</code></pre>
<p><strong>运行程程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
e
d
c
b
a
[]
['e', 'd', 'c', 'b', 'a']
</code></pre>
<h4 id="732-删除包含特定值的列表元素">7.3.2 删除包含特定值的列表元素</h4>
<pre><code class="language-python">n = ['a','b','a','c','a']

while 'a' in n:
    n .remove('a')
print(n)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell"> C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
['b', 'c']
</code></pre>
<h4 id="733-用户输入来填充字典">7.3.3 用户输入来填充字典</h4>
<pre><code class="language-python">class_name = {}
time = True

while time:
    name = input(&quot;你的名字是:&quot;)
    occupation = input(&quot;你的职业是:&quot;)
        class_name[name] = occupation
    a = input(&quot;请问是否继续(yes/no)&quot;)
    if a == 'no':
        time = False
print(class_name)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/whiles.py
你的名字是:张三
你的职业是:医生
请问是否继续(yes/no)yes
你的名字是:李四
你的职业是:警察
请问是否继续(yes/no)no
{'张三': '医生', '李四': '警察'}
</code></pre>
<h2 id="八-函数">八、函数</h2>
<h3 id="81-定义函数">8.1 定义函数</h3>
<pre><code class="language-python">def greet_user():
    print(&quot;hello!&quot;)

greet_user()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
hello!
</code></pre>
<h4 id="811-向函数传递参数信息">8.1.1 向函数传递参数信息</h4>
<pre><code class="language-python">def greet_user(username):
    print(&quot;hello! &quot; + username)

greet_user('tom')
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
hello! tom
</code></pre>
<h3 id="82-传递实参">8.2 传递实参</h3>
<h3 id="821-位置实参">8.2.1 位置实参</h3>
<pre><code class="language-python">def greet_user(user_name, class_name):
    print(&quot;hello! &quot; + user_name)
    print(user_name + &quot; you class is &quot; + class_name)

greet_user('tom','103')
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
hello! tom
tomyou class is 103
</code></pre>
<h4 id="822-关键字实参">8.2.2 关键字实参</h4>
<pre><code class="language-python">def greet_user(user_name, class_name):
    print(&quot;hello! &quot; + user_name)
    print(user_name + &quot; you class is &quot; + class_name)

greet_user(class_name = '103',user_name = 'tom')
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
hello! tom
tom you class is 103
</code></pre>
<h4 id="823-默认值实参">8.2.3 默认值实参</h4>
<pre><code class="language-python">def greet_user(user_name, class_name='103'):
    print(&quot;hello! &quot; + user_name)
    print(user_name + &quot; you class is &quot; + class_name)

greet_user('tom')
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
hello! tom
tom you class is 103 
</code></pre>
<h3 id="83-返回值">8.3 返回值</h3>
<h4 id="831-返回简单值">8.3.1 返回简单值</h4>
<pre><code class="language-python">def function(iterable):
    result = 0
    for x in iterable:
        result = result + x
    return result
n = function([1,2,3])
print(n)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
6
</code></pre>
<h3 id="832-返回列表">8.3.2 返回列表</h3>
<pre><code class="language-python">def function(iterable):
    lists = []
    for x in range(iterable):
        lists.append(x)
    return lists
n = function(5)
print(n)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
[0, 1, 2, 3, 4]
</code></pre>
<h4 id="833-返回字典">8.3.3 返回字典</h4>
<pre><code class="language-python">def greet_user(user_name, class_name):
    dicks = {'names':user_name, 'classs':class_name}
    return dicks

n = greet_user('tom','103')
print(n)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
{'names': 'tom', 'classs': '103'}
</code></pre>
<h3 id="84-传递列表">8.4 传递列表</h3>
<pre><code class="language-python">def greet_user(names):
    for i in names:
        print(&quot;hello &quot; + i)

greet_user([&quot;tom&quot;,&quot;jack&quot;,&quot;jime&quot;])
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
hello tom
hello jack
hello jime
</code></pre>
<h4 id="841-在函数中修改列表">8.4.1 在函数中修改列表</h4>
<pre><code class="language-python">n = ['a','b','c','d','e']
m = []

def function(n,m):
    while n:
        y = n.pop()
        m.append(y)
    print(n)
    return m

print(function(n, m))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
[]
['e', 'd', 'c', 'b', 'a']
</code></pre>
<h3 id="85-传递任意数量的实参">8.5 传递任意数量的实参</h3>
<pre><code class="language-python">def function(*names):
    print(names)

function(&quot;tom&quot;)
function(&quot;jack&quot;, &quot;tom&quot;, &quot;natasha&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
('tom',)
('jack', 'tom', 'natasha')
</code></pre>
<h4 id="851-使用位置实参和任意数量实参">8.5.1 使用位置实参和任意数量实参</h4>
<pre><code class="language-python">def function(class_no,*names):
    for i in names:
        print(class_no + &quot; &quot; + i)
        
function('14', &quot;tom&quot;)
function('13', &quot;jack&quot;, &quot;tom&quot;, &quot;natasha&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
14 tom
13 jack
13 tom
13 natasha
</code></pre>
<h4 id="852-使用任意数量的关键字实参">8.5.2 使用任意数量的关键字实参</h4>
<pre><code class="language-python">def function(class_no,class_teacher,**names):
    dicks = {}
    dicks['ID'] = class_no
    dicks['teacher'] = class_teacher

    for x,y in names.items():
        dicks[x] = y
    return dicks
n = function(1703053,&quot;徐老师&quot;,class_name='tom',name_tel='40039486')
print(n)   
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/defs.py
{'ID': 1703053, 'teacher': '徐老师', 'class_name': 'tom', 'name_tel': '40039486'}
</code></pre>
<h3 id="86-将函数存储在模块中">8.6 将函数存储在模块中</h3>
<h4 id="861-导入整个模块">8.6.1 导入整个模块</h4>
<pre><code class="language-python"># defs.py
def function(class_no,class_teacher,**names):
    dicks = {}
    dicks['ID'] = class_no
    dicks['teacher'] = class_teacher

    for x,y in names.items():
        dicks[x] = y
    return dicks
# 在当前defs.py所在目录下创建TESTS.py
# TESTS.py
import defs

n = defs.function(1703053,&quot;徐老师&quot;,class_name='tom',name_tel='40039486')
print(n)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/TESTS.py
{'ID': 1703053, 'teacher': '徐老师', 'class_name': 'tom', 'name_tel': '40039486'}
</code></pre>
<h4 id="862-导入特定的函数">8.6.2 导入特定的函数</h4>
<pre><code class="language-python"># defs.py
def function(class_no,class_teacher,**names):
    dicks = {}
    dicks['ID'] = class_no
    dicks['teacher'] = class_teacher

    for x,y in names.items():
        dicks[x] = y
    return dicks

def a():
    print(&quot;测试函数&quot;)
    
# TESTS.py
from defs import function

n = function(1703053,&quot;徐老师&quot;,class_name='tom',name_tel='40039486')
print(n)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/TESTS.py
{'ID': 1703053, 'teacher': '徐老师', 'class_name': 'tom', 'name_tel': '40039486'}
</code></pre>
<h4 id="863-使用as给函数指定别名">8.6.3 使用as给函数指定别名</h4>
<pre><code class="language-python"># defs.py
def greet_user():
    print(&quot;测试函数&quot;)

# TESTS.py
from defs import greet_user as a

print(a())
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/TESTS.py
测试函数
</code></pre>
<h4 id="864-使用as给模块指定别名">8.6.4 使用as给模块指定别名</h4>
<pre><code class="language-python"># defs.py
def greet_user():
    print(&quot;测试函数&quot;)

# TESTS.py
import defs as a

print(a.greet_user())
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/TESTS.py
测试函数
</code></pre>
<h4 id="865-导入模块中的所有函数">8.6.5 导入模块中的所有函数</h4>
<pre><code class="language-python"># defs.py
def function(class_no,class_teacher,**names):
    dicks = {}
    dicks['ID'] = class_no
    dicks['teacher'] = class_teacher

    for x,y in names.items():
        dicks[x] = y
    return dicks


def greet_user():
    print(&quot;测试函数&quot;)
    
# TESTS.py
from defs import *

n = function(1703053,&quot;徐老师&quot;,class_name='tom',name_tel='40039486')
print(n)
print(greet_user())
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/TESTS.py
{'ID': 1703053, 'teacher': '徐老师', 'class_name': 'tom', 'name_tel': '40039486'}
测试函数
</code></pre>
<h2 id="九-类">九、类</h2>
<h3 id="91-创建和使用类">9.1 创建和使用类</h3>
<h4 id="911-创建dog类">9.1.1 创建Dog类</h4>
<p>根据Dog()类创建的每个实例都将存储名字和年龄。我们赋予了每条小狗蹲下（sit()）和打滚（roll_over()）的能力：</p>
<pre><code class="language-python">class Dog(): # 首字母大写，不能使用下划线
	&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;
       def __init__(self,name,age):
            &quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;
              self.name = name
              self.age = age
            
       def sit(self):
            &quot;&quot;&quot;模拟小狗蹲下&quot;&quot;&quot;
             print(self.name + &quot;蹲下了！&quot; )
      
       def roll_over(self):
            &quot;&quot;&quot;模拟小狗在地上打滚&quot;&quot;&quot;
             print(self.name + &quot;在地上打滚！&quot;)
</code></pre>
<h4 id="912-根据类创建实例">9.1.2 根据类创建实例</h4>
<pre><code class="language-python">my_dog = Dog(&quot;小灰灰&quot;,2)
a = my_dog.name
print(a)
my_dog.sit()
my_dog.roll_over()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
小灰灰
小灰灰蹲下了！
小灰灰在地上打滚！
</code></pre>
<h3 id="92-使用类和实例">9.2 使用类和实例</h3>
<p>你可以使用类来模拟现实世界中很多情景。类编写好之后，你的大部分时间都将使用根据类创建的实例上。你需要执行的一个重要任务是修改实例的属性。你可以直接修改实例的属性，也可以编写方法以特定的方式进行修改。</p>
<h4 id="921-car类">9.2.1 Car类</h4>
<pre><code class="language-python">class Car():
       &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
       def __init__(self,brand,model,year):
            &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
            self.brand = brand
            self.model = model
            self.year = year
       def get_descriptive_name(self):
            &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
            long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
            return long_name

my_new_car = Car('奥迪','A4L','2020')
print(my_new_car.get_descriptive_name())
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2020款奥迪A4L
</code></pre>
<h4 id="922-给属性指定默认值">9.2.2 给属性指定默认值</h4>
<pre><code class="language-python">class Car():
       &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
       def __init__(self,brand,model,year):
            &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
            self.brand = brand
            self.model = model
            self.year = year
            self.odometer_reading = 0
       def get_descriptive_name(self):
            &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
            long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
            return long_name
       def read_odometer(self):
            &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
            print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)

my_new_car = Car('奥迪','A4L','2020')
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2020款奥迪A4L
这辆汽车的里程是0KM。
</code></pre>
<h4 id="923-修改属性的值">9.2.3 修改属性的值</h4>
<pre><code class="language-python">class Car():
       &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
       def __init__(self,brand,model,year):
            &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
            self.brand = brand
            self.model = model
            self.year = year
            self.odometer_reading = 0
       def get_descriptive_name(self):
            &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
            long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
            return long_name
       def read_odometer(self):
            &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
            print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)

my_new_car = Car('奥迪','A4L','2020')
print(my_new_car.get_descriptive_name())
# 修改汽车里程为23km
my_new_car.odometer_reading = 23
my_new_car.read_odometer()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2020款奥迪A4L
这辆汽车的里程是23KM。
</code></pre>
<h4 id="924-通过方法修改属性的值">9.2.4 通过方法修改属性的值</h4>
<pre><code class="language-python">class Car():
      &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
      def __init__(self,brand,model,year):
            &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
            self.brand = brand
            self.model = model
            self.year = year
            self.odometer_reading = 0
      def get_descriptive_name(self):
            &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
            long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
            return long_name
      def read_odometer(self):
            &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
            print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)
      def update_odeter(self,mileage):
           &quot;&quot;&quot;将里程设置为指定值&quot;&quot;&quot;
           self.odometer_reading = mileage

my_new_car = Car('奥迪','A4L','2020')
print(my_new_car.get_descriptive_name())

my_new_car.update_odeter(57)
my_new_car.read_odometer()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2020款奥迪A4L
这辆汽车的里程是57KM。
</code></pre>
<h4 id="925-通过方法对值进行递增">9.2.5 通过方法对值进行递增</h4>
<pre><code class="language-python">class Car():
     &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
          self.brand = brand
          self.model = model
          self.year = year
          self.odometer_reading = 0
     def get_descriptive_name(self):
          &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
          long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
          return long_name
     def read_odometer(self):
          &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
          print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)
     def update_odeter(self,mileage):
          &quot;&quot;&quot;将里程设置为指定值&quot;&quot;&quot;
          self.odometer_reading = mileage
     def increment_odeter(self,mileage):
          self.odometer_reading += mileage
              
my_new_car = Car('奥迪','A4L','2020')
print(my_new_car.get_descriptive_name())

my_new_car.update_odeter(57)
my_new_car.increment_odeter(70)
my_new_car.read_odometer()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2020款奥迪A4L
这辆汽车的里程是127KM。
</code></pre>
<h3 id="93-继承">9.3 继承</h3>
<h4 id="931-子类的方法__init__">9.3.1 子类的方法<code>__init__()</code></h4>
<blockquote>
<p><code>super()</code>是一个特殊函数，帮助Python将父类和子类关联起来。</p>
</blockquote>
<pre><code class="language-python">class Car():
     &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
          self.brand = brand
          self.model = model
          self.year = year
          self.odometer_reading = 0
     def get_descriptive_name(self):
          &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
          long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
          return long_name
     def read_odometer(self):
          &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
          print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)
     def update_odeter(self,mileage):
          &quot;&quot;&quot;将里程设置为指定值&quot;&quot;&quot;
          self.odometer_reading = mileage

class CopyCar(Car):
     &quot;&quot;&quot;电动汽车&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;
          super().__init__(brand,model,year)

my_lx = CopyCar('理想','ONE','2019')
print(my_lx.get_descriptive_name())
my_lx.update_odeter(30)
my_lx.read_odometer()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2019款理想ONE
这辆汽车的里程是30KM。
</code></pre>
<h4 id="932-给子类定义属性和方法">9.3.2 给子类定义属性和方法</h4>
<pre><code class="language-python">class Car():
     &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
          self.brand = brand
          self.model = model
          self.year = year
          self.odometer_reading = 0
     def get_descriptive_name(self):
          &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
          long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
          return long_name
     def read_odometer(self):
          &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
          print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)
     def update_odeter(self,mileage):
          &quot;&quot;&quot;将里程设置为指定值&quot;&quot;&quot;
          self.odometer_reading = mileage

class CopyCar(Car):
     &quot;&quot;&quot;电动汽车&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;
          super().__init__(brand,model,year)
          self.battery_size = 700
     def capacity(self):
          print(self.brand + &quot;的电能容量是&quot; + str(self.battery_size) + &quot;KWh。&quot;)

my_lx = CopyCar('理想','ONE','2019')
print(my_lx.get_descriptive_name())
my_lx.update_odeter(30)
my_lx.read_odometer()
my_lx.capacity()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2019款理想ONE
这辆汽车的里程是30KM。
理想的电能容量是700KWh。
</code></pre>
<h4 id="933-重写父类的方法">9.3.3 重写父类的方法</h4>
<pre><code class="language-python">class Car():
     &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
          self.brand = brand
          self.model = model
          self.year = year
          self.odometer_reading = 0
     def get_descriptive_name(self):
          &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
          long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
          return long_name
     def read_odometer(self):
          &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
          print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)
     def update_odeter(self,mileage):
          &quot;&quot;&quot;将里程设置为指定值&quot;&quot;&quot;
          self.odometer_reading = mileage

class CopyCar(Car):
     &quot;&quot;&quot;电动汽车&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;
          super().__init__(brand,model,year)
          self.battery_size = 700
     def capacity(self):
          print(self.brand + &quot;的电能容量是&quot; + str(self.battery_size) + &quot;KWh。&quot;)
     def read_odometer(self):
          &quot;&quot;&quot;打印出这辆车的初始里程&quot;&quot;&quot;
          print(&quot;这辆车的初始里程为0KM.&quot;)

my_lx = CopyCar('理想','ONE','2019')
print(my_lx.get_descriptive_name())
my_lx.read_odometer()
my_lx.capacity()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2019款理想ONE
这辆车的初始里程为0KM.
理想的电能容量是700KWh。
</code></pre>
<h4 id="934-将实例用作属性">9.3.4 将实例用作属性</h4>
<pre><code class="language-python">class Car():
     &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
          self.brand = brand
          self.model = model
          self.year = year
          self.odometer_reading = 0
     def get_descriptive_name(self):
          &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
          long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
          return long_name
     def read_odometer(self):
          &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
          print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)
     def update_odeter(self,mileage):
          &quot;&quot;&quot;将里程设置为指定值&quot;&quot;&quot;
          self.odometer_reading = mileage

class Battery():
     &quot;&quot;&quot;一次模拟电动汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,battery_size = 70):
          &quot;&quot;&quot;初始化电瓶的容量&quot;&quot;&quot;
          self.battery_size = battery_size
     def decribe_battery(self):
          &quot;&quot;&quot;打印电瓶容量的消息&quot;&quot;&quot;
          print(&quot;这辆电动汽车的电能容量是&quot; + str(self.battery_size) + &quot;KWh。&quot;)

class CopyCar(Car):
     &quot;&quot;&quot;电动汽车&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;
          super().__init__(brand,model,year)
          self.battery = Battery()

my_lx = CopyCar('理想','ONE','2019')
print(my_lx.get_descriptive_name())
my_lx.read_odometer()
my_lx.battery.decribe_battery()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classS.py
该车是2019款理想ONE
这辆汽车的里程是0KM。
这辆电动汽车的电能容量是70KWh。
</code></pre>
<h3 id="94-导入类">9.4 导入类</h3>
<h4 id="941-导入单个类">9.4.1 导入单个类</h4>
<blockquote>
<p>classS.py</p>
</blockquote>
<pre><code class="language-python">class Car():
     &quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化汽车的属性品牌和型号和生产年份&quot;&quot;&quot;
          self.brand = brand
          self.model = model
          self.year = year
          self.odometer_reading = 0
     def get_descriptive_name(self):
          &quot;&quot;&quot;返回整洁的描述信息&quot;&quot;&quot;
          long_name ='该车是' + str(self.year)+'款' + self.brand + self.model
          return long_name
     def read_odometer(self):
          &quot;&quot;&quot;打印汽车里程的消息&quot;&quot;&quot;
          print(&quot;这辆汽车的里程是&quot; + str(self.odometer_reading) + &quot;KM。&quot;)
     def update_odeter(self,mileage):
          &quot;&quot;&quot;将里程设置为指定值&quot;&quot;&quot;
          self.odometer_reading = mileage

class Battery():
     &quot;&quot;&quot;一次模拟电动汽车的简单尝试&quot;&quot;&quot;
     def __init__(self,battery_size = 70):
          &quot;&quot;&quot;初始化电瓶的容量&quot;&quot;&quot;
          self.battery_size = battery_size
     def decribe_battery(self):
          &quot;&quot;&quot;打印电瓶容量的消息&quot;&quot;&quot;
          print(&quot;这辆电动汽车的电能容量是&quot; + str(self.battery_size) + &quot;KWh。&quot;)

class CopyCar(Car):
     &quot;&quot;&quot;电动汽车&quot;&quot;&quot;
     def __init__(self,brand,model,year):
          &quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;
          super().__init__(brand,model,year)
          self.battery = Battery()
</code></pre>
<blockquote>
<p>创建一个文件，命名为classtest.py</p>
</blockquote>
<pre><code class="language-python">from classS import Car

my_bm = Car('宝马','X1','2019')
print(my_bm.get_descriptive_name())
my_bm.read_odometer()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classtest.py
该车是2019款宝马X1
这辆汽车的里程是0KM。
</code></pre>
<h4 id="942-从一个模块中导入多个类">9.4.2 从一个模块中导入多个类</h4>
<pre><code class="language-python">from classS import Car,CopyCar

my_bm = Car('宝马','X1','2019')
print(my_bm.get_descriptive_name())
my_bm.read_odometer()
print(&quot;----------------------&quot;)
my_lx = CopyCar('理想','ONE','2019')
print(my_lx.get_descriptive_name())
my_lx.read_odometer()
my_lx.battery.decribe_battery()
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/classtest.py
该车是2019款宝马X1
这辆汽车的里程是0KM。
----------------------
该车是2019款理想ONE
这辆汽车的里程是0KM。
这辆电动汽车的电能容量是70KWh。
</code></pre>
<h4 id="943-导入模块中的所有类">9.4.3 导入模块中的所有类</h4>
<pre><code class="language-python">from classS import *
</code></pre>
<h3 id="95-python标准库">9.5 python标准库</h3>
<p>python标准库是一组模块，安装的python都包含它。想要了解标准库，一个很不错的资源网站<a href="http://pymotw.com/">python module of the week</a>，访问其中的目录，在其中可以找到很好玩的几个模块，或者可以阅读collection和random的文档。</p>
<h2 id="十-文件和异常">十、文件和异常</h2>
<h3 id="101-从文件中读取数据">10.1 从文件中读取数据</h3>
<blockquote>
<p>在<code>D盘的/python/</code>目录下建一个文本，内容如下</p>
</blockquote>
<pre><code class="language-powershell">《三国演义》
《水浒传》
《红楼梦》
《西游记》
</code></pre>
<blockquote>
<p>文本名命名为<code>Journey.txt</code></p>
</blockquote>
<pre><code class="language-python">with open('d:/python/journey.txt',encoding='utf-8') as file_journey:
    cotents = file_journey.read()
    print(cotents)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/Texts.py
《三国演义》
《水浒传》
《红楼梦》
《西游记》
</code></pre>
<blockquote>
<p><strong>注意:如果操作的是文本，请务必加上<code>encoding='utf-8'</code>，如果仅是整数或者浮点小数，可以不加上</strong></p>
<p>如果文本没加，则会报如下错误：</p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/Texts.py
Traceback (most recent call last):
    cotents = file_journey.read()
UnicodeDecodeError: 'gbk' codec can't decode byte 0xae in position 10: illegal multibyte sequence
</code></pre>
</blockquote>
<h4 id="1012-文件路径">10.1.2 文件路径</h4>
<p>​	文件目录分为相对路径和绝对路径。</p>
<p>​	相对路径就好比当前路径，当前路径是让python到当前运行的程序所在的目录去查找。</p>
<p>​	绝对路径要比相对路径更长、更复杂，通过使用绝对路径，可读取系统任意地方的文件。</p>
<h4 id="1013-逐行读取">10.1.3 逐行读取</h4>
<pre><code class="language-python">ctents = 'd:\python\journey.txt'

with open(ctents,encoding='utf8') as file_jorney:
    for i in file_jorney:
        print(i)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/Texts.py
《三国演义》

《水浒传》

《红楼梦》

《西游记》
</code></pre>
<h4 id="1014-创建一个包含文件各行内容的列表">10.1.4 创建一个包含文件各行内容的列表</h4>
<pre><code class="language-python">ctents = 'd:\python\journey.txt'

with open(ctents,encoding='utf8') as file_jorney:
    lines = file_jorney.readlines()
    for i in lines:
        print(i.rsplit())
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/Texts.py
['《三国演义》']
['《水浒传》']
['《红楼梦》']
['《西游记》']
</code></pre>
<h4 id="1015-使用文件的内容">10.1.5 使用文件的内容</h4>
<pre><code class="language-python">ctents = 'd:\python\journey.txt'

with open(ctents,encoding='utf8') as file_jorney:
    lines = file_jorney.readlines()

ming = []
for i in lines:
    lens = i.strip().split(&quot;\n&quot;)
    ming += lens

print(ming[0] + &quot;是我国的四大名著之一。&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/Texts.py
《三国演义》是我国的四大名著之一。
</code></pre>
<h4 id="1017-验证某些文字在文本其中">10.1.7 验证某些文字在文本其中</h4>
<pre><code class="language-python">inputs= input(&quot;请输入文本内容：&quot;)

ctents = 'd:\python\journey.txt'

with open(ctents,encoding='utf8') as file_jorney:
    lines = file_jorney.readlines()
pi_str = ''
for n in lines:
    pi_str += n.rstrip()
if inputs in pi_str:
    print(&quot;在里面&quot;)
else:
    print(&quot;不在里面&quot;) 
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">C:\Users\Administrator&gt; &amp; python d:/python/Texts.py
请输入文本内容：python
不在里面
PS C:\Users\Administrator&gt; &amp; python d:/python/Texts.py
请输入文本内容：西游记
在里面
</code></pre>
<h3 id="102-写入文件">10.2 写入文件</h3>
<blockquote>
<p>要将文本写入文件，在调用open()时需要提供另一个实参，告诉python你要写入打开的文件</p>
</blockquote>
<h4 id="1021-写入空文件">10.2.1 写入空文件</h4>
<pre><code class="language-python">filename = 'journet.txt'

with open (filename,'w') as file_object:
    file_object.write(&quot;I love me&quot;)
</code></pre>
<blockquote>
<p>第一个实参时打开文件的名称，第二个实参‘w’是告诉python，要以写入模式打开这个文件。</p>
<p>打开我呢见时，可以指定<strong>读取模式('r')</strong>，<strong>写入模式('w')</strong>，<strong>附加模式('a')</strong>，或者<strong>读取和写入文件模式('r+')</strong>，如果省略了模式实参，python将以默认的只读模式打开文件。</p>
</blockquote>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; Get-Content journet.txt
I love me
</code></pre>
<h4 id="1022-写入多行">10.2.2 写入多行</h4>
<pre><code class="language-python">filename = 'journet.txt'

with open (filename,'w') as file_object:
    file_object.write(&quot;I love me\n&quot;)
    file_object.write(&quot;I love you\n&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; Get-Content journet.txt
I love me
I love you
</code></pre>
<h4 id="1023-附加到文件">10.2.3 附加到文件</h4>
<blockquote>
<p>如果你要给文件添加内容，而不是覆盖原有那文件内容，可以附加模式打开文件，以附加模式打开文件时，python不会再返回文件对象前清空文件，而写入到的文件的行都将添加到末尾，如果指定文件不存在，python将创建一个空文件。</p>
</blockquote>
<pre><code class="language-python">filename = 'journet.txt'

with open (filename,'a') as file_object:
    file_object.write(&quot;apple huawei xiaomi oneplus\n&quot;)
</code></pre>
<blockquote>
<p>当打开文件的时候指定了实参‘a’，以便将内容附加到文件末尾，而不是覆盖文件原来的内容</p>
</blockquote>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; Get-Content journet.txt
I love me
I love you
apple huawei xiaomi oneplus
</code></pre>
<h3 id="103-异常">10.3 异常</h3>
<h4 id="1031-处理zerodivisionerror异常">10.3.1 处理<code>ZeroDivisionError</code>异常</h4>
<blockquote>
<p>python引发异常的简单报错：</p>
<pre><code class="language-python">&gt;&gt;&gt; print(5/0) 
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ZeroDivisionError: division by zero
</code></pre>
</blockquote>
<blockquote>
<p>这种<code>ZeroDivisionError</code>就属于一个异常对象，python无法执行程序，就会停止工作，并引发异常。</p>
</blockquote>
<h4 id="1032-使用try-except代码块">10.3.2 使用<code>try-except</code>代码块</h4>
<blockquote>
<p>可以使用<code>try-except</code>来解决可能引发的异常</p>
</blockquote>
<pre><code class="language-python">try:
    print(5/0)
except ZeroDivisionError:
    print(&quot;0是不能被除的！&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/unusual.py
0是不能被除的！
</code></pre>
<h4 id="1033-else代码块">10.3.3 <code>else</code>代码块</h4>
<blockquote>
<p>在<code>try-except</code>的基础上加上<code>else</code>代码块，将可能有异常的代码放到<code>try-except</code>中，下面这个示例运算成功，就将使用<code>else</code>代码块来打印结果。</p>
</blockquote>
<pre><code class="language-python">a = input(&quot;请输入一个数字:&quot;)
b = input(&quot;请再输入一个数字:&quot;)
try:
    anser = int(a)/int(b)
except ZeroDivisionError:
    print(&quot;有错误&quot;)
else:
    print(&quot;得出的结果是&quot;+ str(anser))
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">PS D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/unusual.py
请输入一个数字:5
请再输入一个数字:0
有错误
PS D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/unusual.py
请输入一个数字:5
请再输入一个数字:1
得出的结果是5.0
</code></pre>
<h4 id="1034-处理filenotfounderror异常">10.3.4 处理<code>FileNotFoundError</code>异常</h4>
<blockquote>
<p>在处理文本的时候，通常找不到文件也会引发异常：<code>FileNotFoundError</code>，因此要处理这个错误，必须要使用try语句。</p>
</blockquote>
<pre><code class="language-python">filename = 'aabcd.txt'

try:
    with open(filename) as files:
        contents = files.read()
except FileNotFoundError:
    print(&quot;没有&quot;+ filename + &quot;这个文件。&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/unusual.py
没有aabcd.txt这个文件。
</code></pre>
<h4 id="1035-分析文本">10.3.5 分析文本</h4>
<pre><code class="language-python">a = 'bai hua qi fang'
b = a.split()
num_words = len(b)
print(&quot;一共有&quot; + str(num_words) + &quot;个词&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/unusual.py
一共有4个词
</code></pre>
<h4 id="1036-使用多个文件">10.3.6 使用多个文件</h4>
<blockquote>
<pre><code class="language-powershell">D:\python&gt; Get-Content a.txt
zhe shi a de wen dang xian shi
D:\python&gt; Get-Content b.txt
zhe shi b de wen dang xian shi
</code></pre>
</blockquote>
<pre><code class="language-python">def words(filename):
    try:
        with open(filename) as filenames:
            contents = filenames.read()
    except FileNotFoundError:
        print(&quot;没有&quot;+ str(filename) + &quot;这个文件。&quot;)
    else:
        b = contents.split()
        num_words = len(b)
        print(str(filename) + &quot;一共有&quot; + str(num_words) + &quot;个词&quot;)

filename = 'a.txt'
words(filename)

filename = 'b.txt'
words(filename)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/unusual.py
a.txt一共有8个词
b.txt一共有8个词
</code></pre>
<h4 id="1037-pass占位符">10.3.7 <code>pass</code>占位符</h4>
<pre><code class="language-python">a = 1
b = 2
if b &gt; a:
    pass
</code></pre>
<blockquote>
<p>pass语句充当了占位符，它提醒你在程序的某个地方什么都没有做，并且以后也许要在这里做些什么</p>
</blockquote>
<h3 id="104-存储数据">10.4 存储数据</h3>
<h4 id="1041-使用jsondump和jsonload">10.4.1 使用<code>json.dump()</code>和<code>json.load()</code></h4>
<blockquote>
<p>使用<code>json.dump()</code>存数据</p>
</blockquote>
<pre><code class="language-python">import json

numbers = [1,2,3,4,5,6,7,8]

filename = 'numbers.json'
with open(filename,'w') as f_obj:
    json.dump(numbers,f_obj)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; Get-Content numbers.json
[1, 2, 3, 4, 5, 6, 7, 8]
</code></pre>
<blockquote>
<p>使用<code>json.load</code>读取数据</p>
</blockquote>
<pre><code class="language-python">import json

filename = 'numbers.json'
with open(filename) as f_obj:
    numbers = json.load(f_obj)

print(numbers)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/storage.py
[1, 2, 3, 4, 5, 6, 7, 8]
</code></pre>
<h4 id="1042-保存和读取用户生成的数据">10.4.2 保存和读取用户生成的数据</h4>
<blockquote>
<p>存储用户名字</p>
</blockquote>
<pre><code class="language-python">import json

username = input(&quot;请输入姓名：&quot;)

filename = 'username.json'
with open(filename,'w') as f_obj:
    json.dump(username,f_obj)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/storage.py
请输入姓名：Chineselijie
</code></pre>
<blockquote>
<p>读取用户名字</p>
</blockquote>
<pre><code class="language-python">import json

filename = 'username.json'
with open(filename) as f_obj:
    username = json.load(f_obj)
    print(&quot;hello! &quot; + username + &quot;.&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/storage.py
hello! Chineselijie.
</code></pre>
<blockquote>
<p><strong>合并两个程序</strong></p>
</blockquote>
<pre><code class="language-python">import json

filename = 'username.json'

try:
    with open(filename) as f_obj:
        username = json.load(f_obj)
except FileNotFoundError:
    username = input(&quot;请输入你的名字：&quot;)
    with open(filename,'w') as f_obj:
        json.dump(username, f_obj)
        print(username + &quot;,欢迎你的第一次到来！&quot;)
else:
    print(&quot;hello! &quot; + username + &quot;.&quot;)
</code></pre>
<p><strong>运行程序</strong></p>
<pre><code class="language-powershell">D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/storage.py
请输入你的名字：Chineselijie
Chineselijie,欢迎你的第一次到来！
PS D:\python&gt; &amp; C:/Users/Administrator/AppData/Local/Programs/Python/Python37/python.exe d:/python/storage.py
hello! Chineselijie.
</code></pre>
<h4 id="1043-重构">10.4.3 重构</h4>
<blockquote>
<p>代码能够正常运行，但可以将代码划分为一系列完成具体工作的函数，这样的过程称之为重构，重构让代码更清晰、更易于理解、更容易扩展。</p>
</blockquote>
<pre><code class="language-python">import json

def get_stored_username():
    &quot;&quot;&quot;如果存储变量就获取它&quot;&quot;&quot;
    filename = 'username.json'
    try:
        with open(filename) as f_obj:
            username = json.load(f_obj)
    except FileNotFoundError:
        return None
    else:
        return username

def get_new_username():
    username = input(&quot;请输入你的名字：&quot;)
    filename = 'username.json'
    with open(filename,'w') as f_obj:
        json.dump(username, f_obj)
    return username

def get_username():
    username = get_stored_username()
    if username:
        print(&quot;hello! &quot; + username)
    else:
        username = get_new_username()
        print(&quot;欢迎您的第一次到来! &quot; + username)

get_username()
</code></pre>
<h3 id="105-pathlib-与-os-模块">10.5 pathlib 与 os 模块</h3>
<h2 id="十一正则表达式">十一.正则表达式</h2>
<h3 id="1111正则表达式下验证qq号码">11.1.1正则表达式下验证QQ号码</h3>
<pre><code class="language-python">import re
def QQ(you_qq):
    QQ = re.compile(r'^[1-9]\d{4,9}$')
    name_QQ = QQ.search(you_QQ)
    if name_QQ:
        print(name_QQ.group(), &quot;是QQ号码&quot;)
    else:
        print(&quot;不是QQ号码,请输入正确的QQ号码&quot;)
you_QQ =(input(&quot;请输入你的QQ号：&quot;))
QQ(you_QQ)
</code></pre>
<h3 id="1112-正则表达式下验证是否邮箱号">11.1.2 正则表达式下验证是否邮箱号</h3>
<pre><code class="language-python">import re
def mail(you_mail):
    QQ_mail = re.compile(r'^[1-9]\d{4,9}@qq.com$')
    name_mail = QQ_mail.search(you_mail)
    if name_mail:
        print(&quot;是QQ邮箱&quot;)
    else:
        print(&quot;不是QQ邮箱,请输入正确的QQ邮箱&quot;)
you_mail=input(&quot;请输入你的QQ邮箱号:&quot;)
mail(you_mail)
</code></pre>
<h3 id="1113-正则表达式下验证是否电话号">11.1.3 正则表达式下验证是否电话号</h3>
<pre><code class="language-python">import re
def phonenumber(n):
    you_number = re.compile(r'[1]\d{10}')
    name_number = you_number.search(n)
    if name_number:
        print(&quot;是电话号&quot;)
    else:
        print(&quot;不是电话号&quot;)
n = input(&quot;请输入电话号：&quot;)
phonenumber(n)
</code></pre>
<h3 id="1114-正则表达式相关符号">11.1.4 正则表达式相关符号</h3>
<blockquote>
<pre><code class="language-react">\d 		0-9的任何数字
\D 		除0-9的数字以外的任何字符
\w 		任何字母、数字或下划线字符(可以认为是匹配'单词'字符)
\W 		除字母、数字和下划线以外的任何字符
\s 		空格、制表符或换行符(可以认为是匹配'空白'字符)
\S 		除空格、制表符和换行符以外的任何字符
? 		匹配零次或一次前面的分组
* 		匹配零次或多次前面的分组
+ 		匹配一次或多次前面的分组
{n} 	匹配n次前面的分组
{n,} 	匹配n次或更多次前面的分组
{,m} 	匹配零次到m次前面的分组
{n,m} 	匹配至少n次、至多m次前面的分组
{n,m}?、*?或+?对面的分组进行非贪心匹配
^spam 	意味这字符串必须以spam开始
spam$ 	意味着字符串必须以spam结束
. 		匹配所有字符，换行符除外
\d、\w、\s 分别匹配数字、单词、空格
\D、\W、\S 分别匹配除数字、单词、空格以外的所有字符
[abc] 	匹配方括号内的任意字符（如a、b、c）
[^abc] 	匹配不在方括号内的字符
</code></pre>
</blockquote>
<h3 id="1121">11.2.1</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://henrylijie.github.io/post/hello-gridea/</id>
        <link href="https://henrylijie.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>